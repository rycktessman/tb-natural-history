times_pool_steady <- sapply(countries, function(x)
(times_pool_steady[[x]]) %>% group_by(id) %>% mutate(id_count=n()), simplify=F)
times_pool_steady <- sapply(countries, function(x)
(times_pool_steady[[x]]) %>% filter(id_count==4) %>%
mutate(id=as.character(id)), simplify=F)
#assign unique ID for each country row
times_pool_steady <- sapply(countries, function(x)
times_pool_steady[[x]] %>% ungroup() %>% group_by(start_pop) %>%
mutate(id_unique=rep(1:n())),
simplify=F)
#sample 50k parameter sets for each country
ids <- sapply(countries, function(x)
sample(times_pool_steady[[x]] %>% filter(start_pop==1) %>%
pull("id_unique"), 50000,
replace=T,prob=times_pool_steady[[x]] %>%
filter(start_pop==1) %>% pull(weight)),
simplify=F)
row_nums <- sapply(countries, function(x)
c(match(ids[[x]], times_pool_steady[[x]] %>% filter(start_pop==1) %>%
pull("id_unique")),
nrow(times_pool_steady[[x]])/4 +
match(ids[[x]], times_pool_steady[[x]] %>% filter(start_pop==1) %>%
pull("id_unique")),
2*nrow(times_pool_steady[[x]])/4 +
match(ids[[x]], times_pool_steady[[x]] %>% filter(start_pop==1) %>%
pull("id_unique")),
3*nrow(times_pool_steady[[x]])/4 +
match(ids[[x]], times_pool_steady[[x]] %>% filter(start_pop==1) %>%
pull("id_unique"))),
simplify=F)
times_pool_steady <- sapply(countries, function(x)
times_pool_steady[[x]][row_nums[[x]], ], simplify=F)
#merge in pop weights
times_pool_steady <- sapply(countries, function(x)
times_pool_steady[[x]] %>%
mutate(start_pop=as.numeric(start_pop)),
simplify=F)
times_pool_steady <- sapply(countries, function(x)
times_pool_steady[[x]] %>%
mutate(weight_steady=unname(unlist(steady_wts[[x]][start_pop]))),
simplify=F)
#bind rows together
times_pool_steady <- bind_rows(times_pool_steady, .id="country")
#calculate averages across all states (weighted by state dist) for each param set
symptom_steady <- times_pool_steady %>%
group_by(country, id) %>%
summarise(symptom=weighted.mean(symptom, w=weight_steady))
times_pool_steady <- times_pool_steady %>% group_by(country, id) %>%
select(-c(id_count, start_pop, id_unique, weight, symptom)) %>%
summarise_all(~weighted.mean(., w=weight_steady, na.rm=T))
times_pool_steady <- cbind(times_pool_steady, "symptom"=(symptom_steady %>% pull(symptom)))
#TOTAL TIME (unconditional)
#mean and CI of total time smear- symptom-
mu <- mean(times_pool_steady$X1)
lb <- quantile(x=times_pool_steady$X1, probs=0.025)
ub <- quantile(x=times_pool_steady$X1, probs=0.975)
times_pop_steady <- c(times_pop_steady, paste0(format(round(mu, 1), nsmall=1), " [", format(round(lb, 1), nsmall=1), "-", format(round(ub, 1), nsmall=1), "]"))
#mean and CI of total time smear+ symptom-
mu <- mean(times_pool_steady$X2)
lb <- quantile(x=times_pool_steady$X2, probs=0.025)
ub <- quantile(x=times_pool_steady$X2, probs=0.975)
times_pop_steady <- c(times_pop_steady, paste0(format(round(mu, 1), nsmall=1), " [", format(round(lb, 1), nsmall=1), "-", format(round(ub, 1), nsmall=1), "]"))
#mean and CI of total time smear- symptom+
mu <- mean(times_pool_steady$X3)
lb <- quantile(x=times_pool_steady$X3, probs=0.025)
ub <- quantile(x=times_pool_steady$X3, probs=0.975)
times_pop_steady <- c(times_pop_steady, paste0(format(round(mu, 1), nsmall=1), " [", format(round(lb, 1), nsmall=1), "-", format(round(ub, 1), nsmall=1), "]"))
#mean and CI of total time smear+ symptom+
mu <- mean(times_pool_steady$X4)
lb <- quantile(x=times_pool_steady$X4, probs=0.025)
ub <- quantile(x=times_pool_steady$X4, probs=0.975)
times_pop_steady <- c(times_pop_steady, paste0(format(round(mu, 1), nsmall=1), " [", format(round(lb, 1), nsmall=1), "-", format(round(ub, 1), nsmall=1), "]"))
#mean and CI of total time smear+ (any)
mu <- mean(times_pool_steady$smear)
lb <- quantile(x=times_pool_steady$smear, probs=0.025)
ub <- quantile(x=times_pool_steady$smear, probs=0.975)
times_pop_steady <- c(times_pop_steady, paste0(format(round(mu, 1), nsmall=1), " [", format(round(lb, 1), nsmall=1), "-", format(round(ub, 1), nsmall=1), "]"))
#mean and CI of total time symptom+ (any)
if(symptom_available) {
mu <- mean(times_pool_steady$symptom, na.rm=T)
lb <- quantile(x=times_pool_steady$symptom, probs=0.025, na.rm=T)
ub <- quantile(x=times_pool_steady$symptom, probs=0.975, na.rm=T)
times_pop_steady <- c(times_pop_steady, paste0(format(round(mu, 1), nsmall=1), " [", format(round(lb, 1), nsmall=1), "-", format(round(ub, 1), nsmall=1), "]"))
} else {
times_pop_steady <- c(times_pop_steady, "NA")
}
#mean and CI of total time w/ TB (any)
mu <- mean(times_pool_steady$tb_any)
lb <- quantile(x=times_pool_steady$tb_any, probs=0.025)
ub <- quantile(x=times_pool_steady$tb_any, probs=0.975)
times_pop_steady <- c(times_pop_steady, paste0(format(round(mu, 1), nsmall=1), " [", format(round(lb, 1), nsmall=1), "-", format(round(ub, 1), nsmall=1), "]"))
#proportion ever reaching a state
#exclude parameter sets if sims didn't finish for all 4 starting populations
props_pool_steady <- sapply(countries, function(x)
props_all[[x]] %>% mutate(start_pop=as.numeric(start_pop)) %>%
group_by(id) %>% mutate(id_count=n())  %>% filter(id_count==4),
simplify=F)
#assign unique ID for each country row
props_pool_steady <- sapply(countries, function(x)
props_pool_steady[[x]] %>% ungroup() %>% group_by(start_pop) %>%
mutate(id_unique=rep(1:n())),
simplify=F)
#sample 50k parameter sets for each country
ids <- sapply(countries, function(x)
sample(props_pool_steady[[x]] %>% filter(start_pop==1) %>%
pull("id_unique"), 50000,
replace=T,prob=props_pool_steady[[x]] %>%
filter(start_pop==1) %>% pull(weight)),
simplify=F)
row_nums <- sapply(countries, function(x)
c(match(ids[[x]], props_pool_steady[[x]] %>% filter(start_pop==1) %>%
pull("id_unique")),
nrow(props_pool_steady[[x]])/4 +
match(ids[[x]], props_pool_steady[[x]] %>% filter(start_pop==1) %>%
pull("id_unique")),
2*nrow(props_pool_steady[[x]])/4 +
match(ids[[x]], props_pool_steady[[x]] %>% filter(start_pop==1) %>%
pull("id_unique")),
3*nrow(props_pool_steady[[x]])/4 +
match(ids[[x]], props_pool_steady[[x]] %>% filter(start_pop==1) %>%
pull("id_unique"))),
simplify=F)
props_pool_steady <- sapply(countries, function(x)
props_pool_steady[[x]][row_nums[[x]], ], simplify=F)
#apply state population weights
props_pool_steady <- sapply(countries, function(x)
props_pool_steady[[x]] %>%
mutate(start_pop=as.numeric(start_pop)),
simplify=F)
props_pool_steady <- sapply(countries, function(x)
props_pool_steady[[x]] %>%
mutate(weight_steady=unname(unlist(steady_wts[[x]][start_pop]))),
simplify=F)
#bind rows
props_pool_steady <- bind_rows(props_pool_steady, .id="country")
#calculate averages across all states (weighted by state dist) for each param set
symptom_steady <- props_pool_steady %>%
group_by(country, id) %>%
summarise(symptom=weighted.mean(symptom, w=weight_steady))
props_pool_steady <- props_pool_steady %>% group_by(country, id) %>%
select(-c(id_count, start_pop, id_unique, symptom)) %>%
summarise_all(~weighted.mean(., w=weight_steady))
props_pool_steady <- cbind(props_pool_steady, "symptom"=(symptom_steady %>% pull(symptom)))
#mean and CI of total time smear- symptom-
mu <- 100*mean(props_pool_steady$X1, weights=props_pool_steady$weight)
lb <- 100*quantile(x=props_pool_steady$X1, probs=0.025, weight=props_pool_steady$weight)
ub <- 100*quantile(x=props_pool_steady$X1, probs=0.975, weight=props_pool_steady$weight)
times_pop_steady <- c(times_pop_steady, paste0(round(mu), "% [", round(lb), "-", round(ub), "%]"))
#mean and CI of total time smear+ symptom-
mu <- 100*mean(props_pool_steady$X2, weights=props_pool_steady$weight)
lb <- 100*quantile(x=props_pool_steady$X2, probs=0.025, weight=props_pool_steady$weight)
ub <- 100*quantile(x=props_pool_steady$X2, probs=0.975, weight=props_pool_steady$weight)
times_pop_steady <- c(times_pop_steady, paste0(round(mu), "% [", round(lb), "-", round(ub), "%]"))
#mean and CI of total time smear- symptom+
mu <- 100*mean(props_pool_steady$X3, weights=props_pool_steady$weight)
lb <- 100*quantile(x=props_pool_steady$X3, probs=0.025, weight=props_pool_steady$weight)
ub <- 100*quantile(x=props_pool_steady$X3, probs=0.975, weight=props_pool_steady$weight)
times_pop_steady <- c(times_pop_steady, paste0(round(mu), "% [", round(lb), "-", round(ub), "%]"))
#mean and CI of total time smear+ symptom+
mu <- 100*mean(props_pool_steady$X4, weights=props_pool_steady$weight)
lb <- 100*quantile(x=props_pool_steady$X4, probs=0.025, weight=props_pool_steady$weight)
ub <- 100*quantile(x=props_pool_steady$X4, probs=0.975, weight=props_pool_steady$weight)
times_pop_steady <- c(times_pop_steady, paste0(round(mu), "% [", round(lb), "-", round(ub), "%]"))
#mean and CI of total time smear+ (any)
mu <- 100*mean(props_pool_steady$smear, weights=props_pool_steady$weight)
lb <- 100*quantile(x=props_pool_steady$smear, probs=0.025, weight=props_pool_steady$weight)
ub <- 100*quantile(x=props_pool_steady$smear, probs=0.975, weight=props_pool_steady$weight)
times_pop_steady <- c(times_pop_steady, paste0(round(mu), "% [", round(lb), "-", round(ub), "%]"))
#mean and CI of total time symptom+ (any)
symptom_available <- T
if(symptom_available) {
mu <- 100*mean(props_pool_steady$symptom, weights=props_pool_steady$weight, na.rm=T)
lb <- 100*quantile(x=props_pool_steady$symptom, probs=0.025, weight=props_pool_steady$weight, na.rm=T)
ub <- 100*quantile(x=props_pool_steady$symptom, probs=0.975, weight=props_pool_steady$weight, na.rm=T)
times_pop_steady <- c(times_pop_steady, paste0(round(mu), "% [", round(lb), "-", round(ub), "%]"))
} else {
times_pop_steady <- c(times_pop_steady, "NA")
}
#mean and CI of proportion reaching spontaneous resolution
mu <- 100*mean(props_pool_steady$X5, weights=props_pool_steady$weight)
lb <- 100*quantile(x=props_pool_steady$X5, probs=0.025, weight=props_pool_steady$weight)
ub <- 100*quantile(x=props_pool_steady$X5, probs=0.975, weight=props_pool_steady$weight)
times_pop_steady <- c(times_pop_steady, paste0(round(mu), "% [", round(lb), "-", round(ub), "%]"))
#mean and CI of proportion reaching treatment
mu <- 100*mean(props_pool_steady$X6, weights=props_pool_steady$weight)
lb <- 100*quantile(x=props_pool_steady$X6, probs=0.025, weight=props_pool_steady$weight)
ub <- 100*quantile(x=props_pool_steady$X6, probs=0.975, weight=props_pool_steady$weight)
times_pop_steady <- c(times_pop_steady, paste0(round(mu), "% [", round(lb), "-", round(ub), "%]"))
#mean and CI of proportion reaching death (TB only)
mu <- 100*mean(props_pool_steady$X7, weights=props_pool_steady$weight)
lb <- 100*quantile(x=props_pool_steady$X7, probs=0.025, weight=props_pool_steady$weight)
ub <- 100*quantile(x=props_pool_steady$X7, probs=0.975, weight=props_pool_steady$weight)
times_pop_steady <- c(times_pop_steady, paste0(round(mu), "% [", round(lb), "-", round(ub), "%]"))
times_pool_out[[5]] <- unlist(times_pop_steady)
}
times_pool_out <- bind_cols(times_pool_out)
write.csv(times_pool_out, file=paste0(path_out, "times_out_pooled_", scenario_lab, ".csv"), row.names=F)
rel_inf_out_all <- list()
rel_inf_samples_all <- list()
prop_trans_sum_all <- list()
rel_inf_smear_all <- list()
rel_smear_samples_all <- list()
rel_inf_smear_sa_all <- list()
for(i in countries) {
#define rel infectiousness parameters
rr_m <- 0.35 #relative infectiousness of smear-, compared to smear+
rr_s <- 0.7 #relative infectiousness of subclinical, compared to symptomatic
inf <- 1
inf_m <- inf/rr_m
inf_s <- inf/rr_s
inf_ms <- inf_m/rr_s
wts <- unname(unlist(steady_wts[[i]]))
size <- sizes[[i]]
times_all <- times_all_all[[i]]
ids_1 <- as.character(unique((times_all %>% filter(start_pop==1))[["mean"]] %>% pull(id)))
ids_2 <- as.character(unique((times_all %>% filter(start_pop==2))[["mean"]] %>% pull(id)))
ids_3 <- as.character(unique((times_all %>% filter(start_pop==3))[["mean"]] %>% pull(id)))
ids_4 <- as.character(unique((times_all %>% filter(start_pop==4))[["mean"]] %>% pull(id)))
ids_sub <- Reduce(intersect, list(ids_1, ids_2, ids_3, ids_4))
#used as reference
times_sub_1 <- (times_all %>% filter(start_pop==1))[["mean"]]
times_sub_1 <- times_sub_1 %>% filter(id %in% ids_sub)
#sample population weights to use in calculations
props <- data.frame(t(rmultinom(n=length(ids_sub), size=size, prob=wts))/size)
names(props) <- c("prop1", "prop2", "prop3", "prop4")
props <- props %>% mutate(id=ids_sub)
props_lb <- colQuantiles(as.matrix(props[,1:4]), probs=0.025)
props_ub <- colQuantiles(as.matrix(props[,1:4]), probs=0.975)
rel_inf_out <- list()
rel_inf_samples <- list()
prop_trans_out <- list()
for(j in 1:4) {
print(j)
times_pop <- c()
times_all_state <- (times_all %>% filter(start_pop==j))[["mean"]]
#need to match IDs to calculate relative infections for each param set
times_sub_state <- times_all_state %>% filter(id %in% ids_sub)
times_sub_state <- left_join(times_sub_state, props, by="id")
#calculate steady state % of transmission
times_sub_state <- times_sub_state %>%
mutate(prop_trans=inf*X1*prop1+inf_m*X2*prop2+inf_s*X3*prop3+inf_ms*X4*prop4)
prop_trans_out[[j]] <- times_sub_state$prop_trans
#only calculate relative infectiousness for pops 2-4 (1 is reference)
rel_inf_all <- (inf*times_sub_state$X1 +
inf_m*times_sub_state$X2 +
inf_s*times_sub_state$X3 +
inf_ms*times_sub_state$X4)/(inf*times_sub_1$X1 +
inf_m*times_sub_1$X2 +
inf_s*times_sub_1$X3 +
inf_ms*times_sub_1$X4)
if(j!=1) {
rel_inf_mu <- wtd.mean(x=(inf*times_sub_state$X1 +
inf_m*times_sub_state$X2 +
inf_s*times_sub_state$X3 +
inf_ms*times_sub_state$X4)/
(inf*times_sub_1$X1 +
inf_m*times_sub_1$X2 +
inf_s*times_sub_1$X3 +
inf_ms*times_sub_1$X4),
weight=times_sub_state$weight)
rel_inf_lb <- wtd.quantile(x=(inf*times_sub_state$X1 +
inf_m*times_sub_state$X2 +
inf_s*times_sub_state$X3 +
inf_ms*times_sub_state$X4)/
(inf*times_sub_1$X1 +
inf_m*times_sub_1$X2 +
inf_s*times_sub_1$X3 +
inf_ms*times_sub_1$X4),
probs=0.025,
weight=times_sub_state$weight,
normwt=T)[[1]]
rel_inf_ub <- wtd.quantile(x=(inf*times_sub_state$X1 +
inf_m*times_sub_state$X2 +
inf_s*times_sub_state$X3 +
inf_ms*times_sub_state$X4)/
(inf*times_sub_1$X1 +
inf_m*times_sub_1$X2 +
inf_s*times_sub_1$X3 +
inf_ms*times_sub_1$X4),
probs=0.975,
weight=times_sub_state$weight,
normwt=T)[[1]]
rel_inf <- c("mu"=rel_inf_mu, "lb"=rel_inf_lb, "ub"=rel_inf_ub)
rel_inf_out[[j]] <- rel_inf
rel_inf_samples[[j]] <- rel_inf_all
}
}
rel_inf_out <- bind_rows(rel_inf_out)
rel_inf_out <- data.frame(rel_inf_out, "name"=c("Smear+ Subclinical",
"Smear- Symptomatic",
"Smear+ Symptomatic"))
rel_inf_out <- rel_inf_out %>% mutate(name=factor(name, levels=c("Smear+ Subclinical",
"Smear- Symptomatic",
"Smear+ Symptomatic")))
prop_trans_out <- bind_cols(prop_trans_out)
names(prop_trans_out) <- names(props)[1:4]
prop_trans_out <- prop_trans_out %>% mutate(id=ids_sub)
prop_trans_out <- left_join(prop_trans_out, times_sub_state %>% select(id, weight), by="id")
#normalize to 100%
prop_trans_out <- prop_trans_out %>% mutate(norm_sum=prop1+prop2+prop3+prop4,
prop1=prop1/norm_sum,
prop2=prop2/norm_sum,
prop3=prop3/norm_sum,
prop4=prop4/norm_sum
)
#summary states
prop_trans_sum <- data.frame("prop_trans_mu"=c(wtd.mean(prop_trans_out$prop1, weight=prop_trans_out$weight),
wtd.mean(prop_trans_out$prop2, weight=prop_trans_out$weight),
wtd.mean(prop_trans_out$prop3, weight=prop_trans_out$weight),
wtd.mean(prop_trans_out$prop4, weight=prop_trans_out$weight)),
"prop_trans_lb"=c(wtd.quantile(x=prop_trans_out$prop1, probs=0.025,
weight=prop_trans_out$weight,
normwt=T)[[1]],
wtd.quantile(x=prop_trans_out$prop2, probs=0.025,
weight=prop_trans_out$weight,
normwt=T)[[1]],
wtd.quantile(x=prop_trans_out$prop3, probs=0.025,
weight=prop_trans_out$weight,
normwt=T)[[1]],
wtd.quantile(x=prop_trans_out$prop4, probs=0.025,
weight=prop_trans_out$weight,
normwt=T)[[1]]),
"prop_trans_ub"=c(wtd.quantile(x=prop_trans_out$prop1, probs=0.975,
weight=prop_trans_out$weight,
normwt=T)[[1]],
wtd.quantile(x=prop_trans_out$prop2, probs=0.975,
weight=prop_trans_out$weight,
normwt=T)[[1]],
wtd.quantile(x=prop_trans_out$prop3, probs=0.975,
weight=prop_trans_out$weight,
normwt=T)[[1]],
wtd.quantile(x=prop_trans_out$prop4, probs=0.975,
weight=prop_trans_out$weight,
normwt=T)[[1]])
)
prop_trans_sum <- prop_trans_sum %>% mutate(pop_prop=wts,
pop_prop_lb=props_lb,
pop_prop_ub=props_ub)
prop_trans_sum <- prop_trans_sum %>%
mutate(name=state_names)
prop_trans_sum <- prop_trans_sum %>%
mutate(lab=paste0(round(prop_trans_mu*100, 0), "% [",
round(prop_trans_lb*100, 0), "-",
round(prop_trans_ub*100, 0), "%]"),
lab2=paste0(round(prop_trans_mu*100, 0), "%"),
pop_lab=paste0(round(pop_prop*100, 0), "% [",
round(pop_prop_lb*100, 0), "-",
round(pop_prop_ub*100, 0), "%]"),
pop_lab2=paste0(round(pop_prop*100, 0), "%")
)
prop_trans_sum <- prop_trans_sum %>%
mutate(name=factor(name, levels=prop_trans_sum$name),
lab=factor(lab, levels=prop_trans_sum$lab),
pop_lab=factor(pop_lab, levels=unique(prop_trans_sum$pop_lab)))
rel_inf_samples <- bind_cols(rel_inf_samples)
names(rel_inf_samples) <- c("Smear+ Subclinical",
"Smear- Symptomatic",
"Smear+ Symptomatic")
#calculate smear+ subclinical relative to smear+ symptomatic (to see if statistically significant)
times_all_2 <- (times_all %>% filter(start_pop==2))[["mean"]]
times_all_4 <- (times_all %>% filter(start_pop==4))[["mean"]]
times_sub_2 <- times_all_2 %>% filter(id %in% ids_sub)
times_sub_4 <- times_all_4 %>% filter(id %in% ids_sub)
rel_smear_samples <- (inf*times_sub_2$X1 +
inf_m*times_sub_2$X2 +
inf_s*times_sub_2$X3 +
inf_ms*times_sub_2$X4)/
(inf*times_sub_4$X1 +
inf_m*times_sub_4$X2 +
inf_s*times_sub_4$X3 +
inf_ms*times_sub_4$X4)
rel_inf_mu <- wtd.mean(x=(inf*times_sub_2$X1 +
inf_m*times_sub_2$X2 +
inf_s*times_sub_2$X3 +
inf_ms*times_sub_2$X4)/
(inf*times_sub_4$X1 +
inf_m*times_sub_4$X2 +
inf_s*times_sub_4$X3 +
inf_ms*times_sub_4$X4),
weight=times_sub_2$weight)
rel_inf_lb <- wtd.quantile(x=(inf*times_sub_2$X1 +
inf_m*times_sub_2$X2 +
inf_s*times_sub_2$X3 +
inf_ms*times_sub_2$X4)/
(inf*times_sub_4$X1 +
inf_m*times_sub_4$X2 +
inf_s*times_sub_4$X3 +
inf_ms*times_sub_4$X4),
probs=0.025,
weight=times_sub_2$weight,
normwt=T)[[1]]
rel_inf_ub <- wtd.quantile(x=(inf*times_sub_2$X1 +
inf_m*times_sub_2$X2 +
inf_s*times_sub_2$X3 +
inf_ms*times_sub_2$X4)/
(inf*times_sub_4$X1 +
inf_m*times_sub_4$X2 +
inf_s*times_sub_4$X3 +
inf_ms*times_sub_4$X4),
probs=0.975,
weight=times_sub_2$weight,
normwt=T)[[1]]
rel_inf_smear <- data.frame("mu"=rel_inf_mu, "lb"=rel_inf_lb, "ub"=rel_inf_ub,
"name"="Smear+ Subclinical")
#sensitivity analysis on (smear+) subclinical vs. (smear+) symptomatic
rel_inf_smear_sa <- list()
for(rr_s in (1:100)/100) {
inf_m <- inf/rr_m
inf_s <- inf/rr_s
inf_ms <- inf_m/rr_s
ids_2 <- unique(times_all_2$id)
ids_4 <- unique(times_all_4$id)
times_sub_2 <- times_all_2 %>% filter(id %in% ids_4)
times_sub_4 <- times_all_4 %>% filter(id %in% ids_2)
rel_inf_mu <- wtd.mean(x=(inf*times_sub_2$X1 +
inf_m*times_sub_2$X2 +
inf_s*times_sub_2$X3 +
inf_ms*times_sub_2$X4)/
(inf*times_sub_4$X1 +
inf_m*times_sub_4$X2 +
inf_s*times_sub_4$X3 +
inf_ms*times_sub_4$X4),
weight=times_sub_2$weight)
rel_inf_lb <- wtd.quantile(x=(inf*times_sub_2$X1 +
inf_m*times_sub_2$X2 +
inf_s*times_sub_2$X3 +
inf_ms*times_sub_2$X4)/
(inf*times_sub_4$X1 +
inf_m*times_sub_4$X2 +
inf_s*times_sub_4$X3 +
inf_ms*times_sub_4$X4),
probs=0.025,
weight=times_sub_2$weight,
normwt=T)[[1]]
rel_inf_ub <- wtd.quantile(x=(inf*times_sub_2$X1 +
inf_m*times_sub_2$X2 +
inf_s*times_sub_2$X3 +
inf_ms*times_sub_2$X4)/
(inf*times_sub_4$X1 +
inf_m*times_sub_4$X2 +
inf_s*times_sub_4$X3 +
inf_ms*times_sub_4$X4),
probs=0.975,
weight=times_sub_2$weight,
normwt=T)[[1]]
rel_inf <- c("mu"=rel_inf_mu, "lb"=rel_inf_lb, "ub"=rel_inf_ub,
"rr_s"=rr_s)
rel_inf_smear_sa[[as.character(rr_s)]] <- rel_inf
}
rel_inf_smear_sa <- bind_rows(rel_inf_smear_sa)
rel_inf_smear_sa <- rel_inf_smear_sa %>% mutate(name="Smear+ Subclinical")
rel_inf_out_all[[i]] <- rel_inf_out
rel_inf_samples_all[[i]] <- rel_inf_samples
rel_inf_smear_all[[i]] <- rel_inf_smear
rel_smear_samples_all[[i]] <- rel_smear_samples
prop_trans_sum_all[[i]] <- prop_trans_sum
rel_inf_smear_sa_all[[i]] <- rel_inf_smear_sa
}
rel_inf_out_all <- bind_rows(rel_inf_out_all, .id="country")
rel_inf_samples_all <- bind_rows(rel_inf_samples_all, .id="country")
rel_inf_samples_all <- pivot_longer(rel_inf_samples_all, cols=2:4,
names_to="state", values_to="rel_inf")
rel_smear_samples_all <- stack(rel_smear_samples_all)
names(rel_smear_samples_all) <- c("rel_inf", "country")
rel_smear_samples_all <- rel_smear_samples_all %>% mutate(state="Smear+ Subclinical",
country=as.character(country))
rel_inf_smear_all <- bind_rows(rel_inf_smear_all, .id="country")
rel_inf_smear_all <-
rel_inf_smear_all %>% mutate(inf_m=0.7)
rel_inf_smear_sa_all <- bind_rows(rel_inf_smear_sa_all, .id="country")
prop_trans_sum_all <- bind_rows(prop_trans_sum_all, .id="country")
#min rr_s by country where rel_inf > 1
rel_inf_smear_sa_all %>% filter(mu>=1) %>% group_by(country) %>%
summarise(rr_s=min(rr_s)) %>% select(country, rr_s)
#export data for appendix Table 2
#part 1: durations
rel_inf_out <- rel_inf_out_all %>% mutate(rel_to="Smear- Subclinical")
rel_inf_pool <- rel_inf_samples_all %>% group_by(state) %>%
summarise(mu=mean(rel_inf), lb=quantile(rel_inf, 0.025), ub=quantile(rel_inf, 0.975)) %>%
mutate(country="Pooled", rel_to="Smear- Subclinical") %>%
rename("name"="state")
rel_inf_out <- bind_rows(rel_inf_out, rel_inf_pool)
rel_smear_out <- rel_inf_smear_all %>% mutate(rel_to="Smear+ Symptomatic") %>%
select(-inf_m)
rel_smear_pool <- rel_smear_samples_all %>% group_by(state) %>%
summarise(mu=mean(rel_inf), lb=quantile(rel_inf, 0.025), ub=quantile(rel_inf, 0.975)) %>%
mutate(country="Pooled", rel_to="Smear+ Symptomatic") %>%
rename("name"="state")
rel_inf_out <- bind_rows(rel_inf_out, rel_smear_out)
rel_inf_out <- bind_rows(rel_inf_out, rel_smear_pool)
rel_inf_out <- rel_inf_out %>%
mutate(est=paste0(format(round(mu, 1), nsmall=1), " [",
format(round(lb, 1), nsmall=1), "-",
format(round(ub, 1), nsmall=1), "]")) %>%
select(-c(mu, lb, ub))
rel_inf_out <- pivot_wider(rel_inf_out, id_cols=c("name", "rel_to"),
names_from=country, values_from=est)
rel_inf_out <- rel_inf_out[, c("name", sort(countries), "Pooled", "rel_to")]
write.csv(rel_inf_out, file=paste0(path_out, "rel_inf_pp_table_", scenario_lab, ".csv"), row.names=F)
props_out <- prop_trans_sum_all %>% select(country, name, lab, pop_lab)
props_out <- props_out %>% pivot_longer(props_out, cols=contains("lab"),
names_to="estimate", values_to="value") #warning here is fine
props_out <- props_out %>%
mutate(estimate=if_else(estimate=="lab", "trans_prop", "pop_prop"))
props_out <- pivot_wider(props_out, id_cols=c("name", "estimate"),
names_from=country, values_from="value")
props_out <- props_out %>% arrange(estimate, name)
props_out <- props_out[, c("estimate", "name", sort(countries))]
write.csv(props_out, file=paste0(path_out, "/rel_inf_pop_table_", scenario_lab, ".csv"), row.names=F)
85/360
103/299
250000/330000
